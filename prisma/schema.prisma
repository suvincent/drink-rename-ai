// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  items     MenuItem[]
  createdAt DateTime @default(now())
}

model MenuItem {
  id            Int      @id @default(autoincrement())
  originalName  String
  newName       String
  price         Float? // New field for price
  description   String? // New field for description
  shop          Shop     @relation(fields: [shopId], references: [id])
  shopId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt // Made nullable
  updatedById   String? // New field for user who updated
  updatedBy     User?    @relation(fields: [updatedById], references: [id]) // Relation to User
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dailyRequests UserDailyRequest[]
  menuItems     MenuItem[] // Reverse relation to MenuItem
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User-based Rate Limiting Model
model UserDailyRequest {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  count     Int      @default(0)

  @@unique([userId, date])
}